" vim: foldmethod=marker foldlevel=1

if has('multi_byte')
  set encoding=utf-8
endif
scriptencoding utf8

" ============================================================================
" Plugin Block  {{{
" ============================================================================

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  augroup vplug
    autocmd!
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
  augroup END
endif

call plug#begin('~/.vim/bundle')
  Plug 'w0rp/ale'
  Plug 'tpope/vim-dispatch'
  Plug 'elixir-lang/vim-elixir'
  Plug 'tpope/vim-endwise'
  Plug 'tpope/vim-eunuch'
  Plug 'tpope/vim-fugitive'
  Plug 'junegunn/fzf', {'dir': '~/.fzf', 'do': './install --all --no-update-rc'}
  Plug 'junegunn/fzf.vim'
  Plug 'drewreeve/gruvbox'
  Plug 'pangloss/vim-javascript'
  Plug 'leafgarland/typescript-vim'
  Plug 'MaxMEllon/vim-jsx-pretty'
  Plug 'pbrisbin/vim-mkdir'
  Plug 'tpope/vim-rails'
  Plug 'vim-ruby/vim-ruby'
  Plug 'tpope/vim-surround'
  Plug 'janko-m/vim-test'

  " Local config
  if filereadable(expand('~/.vim.plugins.local'))
    source ~/.vim.plugins.local
  endif
call plug#end()
" }}}

" ============================================================================
" General vim settings {{{
" ============================================================================

let mapleader=','

if has('autocmd')
  filetype plugin indent on
endif
if has('syntax') && !exists('g:syntax_on')
  syntax enable
endif

" Load matchit.vim
runtime! macros/matchit.vim

set autoindent                 " Minimal automatic indenting
set backspace=indent,eol,start " Proper backspace behavior
set hidden                     " Allow unsaved background buffers
set incsearch                  " Incremental search
set hlsearch                   " Highlight matches from previous search
set cursorline                 " Highlight current line
set ruler                      " Always show cursor position
set number relativenumber      " Show line numbers relative to cursor
set laststatus=2               " Always show statusline
set nojoinspaces               " Use one space after punctuation
set history=1000               " Remember more commands/search history
set showcmd                    " Display incomplete commands
set scrolloff=3                " More context when scrolling off end of buffer
set nrformats-=octal           " Don't add to/subtract from octal numbers
set autoread
set modeline                   " modelines (comments to set per-file options)
set modelines=2                " inspect top/bottom 2 lines for modeline

" Open new split panes to right and bottom
set splitbelow
set splitright

" Enhanced tab completion
set wildmenu
set wildmode=list:longest,list:full

" Make searches case-sensitive only if they contain upper-case characters
set ignorecase smartcase

" Softtabs, 2 spaces
set tabstop=2
set shiftwidth=2
set shiftround
set expandtab

" Highlight where 80 characters is
set colorcolumn=81

" Display extra whitespace
set list listchars=tab:»·,trail:·,nbsp:·

" Disable swapfiles
set noswapfile
set nobackup
set nowritebackup

" Autocomplete with dictionary words when spell check is on
set complete+=kspell

" Use ripgrep when possible
if executable('rg')
  set grepprg=rg\ --vimgrep\ --no-heading\ --smart-case
endif
" }}}

" ============================================================================
" Mappings {{{
" ============================================================================

" Smart tab key (borrowed from gary bernhardt)
" inserts tabs at the beginning of lines, otherwise does completion
function! InsertTabWrapper()
  let col = col('.') - 1
  if !col
    return "\<tab>"
  endif

  let char = getline('.')[col - 1]
  if char =~# '\k'
    " There's an identifier before the cursor, so complete the identifier.
    return "\<c-p>"
  else
    return "\<tab>"
  endif
endfunction
inoremap <expr> <tab> InsertTabWrapper()
inoremap <s-tab> <c-n>

" Clear highlighted searches
nnoremap <silent> <leader>c :nohlsearch<CR>

" insert hashrocket with <c-l>
imap <c-l> <space>=><space>

" Switch between last 2 files
nnoremap <leader><leader> <c-^>

" Move around splits with <c-hjkl>
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l
" }}}

" ============================================================================
" Augroups {{{
" ============================================================================

if has('autocmd')
  augroup vimrcEx
    autocmd!

    " Jump to last cursor position unless it's invalid, in an event handler
    " or for commit messages (taken from $VIMRUNTIME/defaults.vim)
    autocmd BufReadPost *
      \ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
      \ |   exe "normal! g`\""
      \ | endif

    " Set syntax for certain file types
    autocmd BufRead,BufNewFile zprofile set filetype=zsh

    " Unset paste on InsertLeave
    autocmd InsertLeave * silent! set nopaste
  augroup END
endif
" }}}

" ============================================================================
" Plugin Settings/Mappings {{{
" ============================================================================

" dispatch
" --------
let g:dispatch_compilers = {
      \ 'bundle exec': '',
      \ 'clear;': '',
      \ 'zeus': ''}

" FZF
" --------
if executable('rg')
  command! -bang -nargs=* Rg
  \ call fzf#vim#grep("rg --column --line-number --no-heading --hidden --color=always -S ".shellescape(<q-args>), 1, <bang>0)

  " grep word under cursor
  nnoremap K :set nois<CR> :Rg! <C-R><C-W><CR>
endif

" fuzzy search by filename
nnoremap <silent> <c-p> :Files<cr>
" fuzzy search buffers
nnoremap <silent> <Leader>b :Buffers<CR>

" vim-test
" --------
nnoremap <silent> <Leader>t :TestFile<CR>
nnoremap <silent> <Leader>s :TestNearest<CR>
nnoremap <silent> <Leader>l :TestLast<CR>
nnoremap <silent> <Leader>a :TestSuite<CR>
nnoremap <silent> <leader>gt :TestVisit<CR>

let g:test#strategy = 'dispatch'

" vim-ruby
" --------
let g:ruby_indent_block_style = 'do'
let g:ruby_indent_assignment_style = 'variable'
" }}}

" ============================================================================
" Appearance {{{
" ============================================================================

" Status line
" -----------
" Function: display errors from Ale in statusline
function! LinterStatus() abort
  let l:counts = ale#statusline#Count(bufnr(''))

  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors

  return l:counts.total == 0 ? '  OK' : printf(
  \   '  W:%d E:%d',
  \   all_non_errors,
  \   all_errors
  \)
endfunction

set statusline=
set statusline+=%<                    " truncate point
set statusline+=\ %f                  " relative path to file
set statusline+=\ %m                  " modified flag [+], [-] etc.
set statusline+=%r                    " readonly flag [RO]
set statusline+=\ %y                  " filetype
set statusline+=%=                    " switch sides
set statusline+=%(%l:%c%V%)           " current line:column/virtual column
set statusline+=\ \ %3(%P%)           " percentage through file
set statusline+=%{LinterStatus()}\    " Errors/warnings from Ale

" Colors
" -----------
set termguicolors " True color in vim 8 and neovim

" Fix truecolor in vim inside tmux. The following options get set
" automatically when $TERM is xterm but our tmux sets it to tmux-256color so
" we need to do it manually.
if !has('nvim')
  if &term ==# 'tmux-256color' || &term ==# 'st-256color' || &term ==# 'alacritty'
    let &t_8f="\<ESC>[38;2;%lu;%lu;%lum"
    let &t_8b="\<ESC>[48;2;%lu;%lu;%lum"
  endif
endif

let g:gruvbox_italic='1'

set background=dark
if globpath(&runtimepath, 'colors/gruvbox.vim', 1) !=# ''
  colorscheme gruvbox
endif

" Change fzf colors to match gruvbox theme
let g:fzf_colors = {
      \ 'fg':      ['fg', 'GruvboxGray'],
      \ 'bg':      ['bg', 'Normal'],
      \ 'hl':      ['fg', 'GruvboxRed'],
      \ 'fg+':     ['fg', 'GruvboxGreen'],
      \ 'bg+':     ['bg', 'GruvboxBg1'],
      \ 'hl+':     ['fg', 'GruvboxRed'],
      \ 'info':    ['fg', 'GruvboxOrange'],
      \ 'prompt':  ['fg', 'GruvboxBlue'],
      \ 'header':  ['fg', 'GruvboxBlue'],
      \ 'pointer': ['fg', 'Error'],
      \ 'marker':  ['fg', 'Error'],
      \ 'spinner': ['fg', 'Statement'],
      \ }
" }}}

" ============================================================================
" Nvim settings {{{
" ============================================================================

if has('nvim')
  " Show effects of commands incrementally
  set inccommand=nosplit

  let $FZF_DEFAULT_OPTS .= ' --inline-info'
endif
" }}}

" ============================================================================
" Local config
" ============================================================================

if filereadable($HOME . '/.vimrc.local')
  source $HOME/.vimrc.local
endif
